For clientapp:(Tshirt Designer )

To start app, called "clientapp" npm create vite@latest -- --template react clientapp

then, (necessary packages installation), cd clientapp, npm install three(3d threejs library) @react-three/fiber(react renderer for 3js library) 
@react-three/drei (useful addons for react three fiber ) maath(math helpers: mostly math used for three js) valtio(new package used for managing 
react state) react-color(this package is a color picker) framer-motion(package used for cool animations ) therefore, 

"npm install three @react-three/fiber @react-three/drei maath valtio react-color framer-motion "

now install tailwind: website; srch.vite and follow the instructions 
(npm install -D tailwindcss postcss autoprefixer, (initialize: npx tailwindcss init -p))
(aba : "tailwind.config.js ko content ma lekha", "./src/index.css ko mathi patti pani lekha "


###############################################################
####(Home.jsx)Code ko further information.
Home.jsx (const snap = useSnapshot(state); //one current snapshot of that state, can use fxn
written inside state, can be used anywhere in components using this lines)

<AnimatePresence>(oc) // components of framer-motion: enables animation of components that have been removed from tree
{snap.intro && (

) }  //if we are currently on the intro page "on the hme page", in that case we can render the hme page data by(inside):

# <motion.section   className="home" {}>(oc) //simple (more precise section)div with animation attached in it. 
      //have classname 'home' and for animation we provide new obj inside curly braces. "spread (dot dot dot) slideAnimation('left')" 
      //animation kata bata?? left bata (motion section banayeu hamle precise garna (ramro snaga code lekhna ))


#motion.header(oc) //firsttime apprearing something on screen so motion header use gareko 
within motion.header, we can have a image, <img/> (img have src='./threesj.png' alt='logo' className='afai milayer lekh ')
//it ganna have slideAnimation going down <motion.header {...slideAnimation("down")}>     </motion.header></motion.section> )} ##snap.intro(closing)

//below motion header, we ganna have <motion.div>
</motion.div> //that have className="", spread (headContainer){...headContainerAnimation} 
//inside there, have another motion.div// with spread (headTextAnimation) {...headTextAnimation} 
//finally, inside there we can display h1, 

////custombutton is imported from components, we use props called "handleClick and then arrow fxn"
this ganna update the state.intro to false, finally pass some customstyles 




#######################################################
custombutton.jsx 

reder the title pass through props inside custombutton({title })
return (
    <button className={`px-2`}>
    {title}
    </button>
)
// tya vitra ko , props includes , ({type, title, customStyles, handleClick})
//we create new style property and there we can {generateStyle to which we pass (type) }
//yo generateStyle lai kaam garauna, mathi const generateStyle, arrow fxn, if lagauna parxa 


////Three js cheetsheet for importing (extra knowledge from csheet)
import * as THREE from 'three';
import React, {useRef, useEffect } from 'react';
import {Canvas } from 'react-three-fiber';



#################################################
customizer.jsx

inside <AnimatePresence>
{!snap.intro &&(                                  //if not snap.intro(the homepage) &&(then)(... j hunxa tei lekhni tyo case ma)
    <></>                                   //empty react fragment
)}



###################################
(after adding some, tabs and customizing page, we goto canvas,index.jsx for 
three js use for 3d modelling and designing
using cameras,lightening, shadow etc.)


inside canvas we create many components and utilize it inside, canvas:index.jsx
by importing it.
In Canvas, we use ambientLight that have intensity
then, we use Environment, it accept preset and we use preset="city  "/>

In there we use, CameraRig (OC), inside it, Backdrop and then Center(OC),
then, in Center, it have Shirt components.

##the things won''t work goto inspect/console.
## div matrai vayo, aru property use garena vanya xa so, 
goto, Shirt.jsx and use other fxn instead of div. (three ko fxn use )



##################################
shirt.jsx

 const logoTexture = useTexture(snap.logoDecal) //this line indicates that, we use texture for the 3d model by useTexture hooks and 
 //snap.logoDecal come from (const snap = useSnapshot(store) gareko bata snap and logoDecal vanni tyo store ma use vako xa tyo lerau vaneko )
 (currently its a path pointing towords .png image)

 const fullTexture vanni arko ra same like up defined and told.


 castShadow meaning that it can cast Shadow.




 ########################
 CameraRig.jsx

 after importing necessary components, 
 within CameraRig, we are passing some childern components,(specifically the center contain the shirt, so to be able to 
 display it we have to get it from the childern (react props: astinae padheko{childern vanni react props rakehko tya })) 
 and then render it out,  we can do that by returning <group> and that group is rendering the childern.
 
 we want to modify a bit to move the camera closer, 
 for that we create a newRef called,
 const group = newRef();

 then we ganna we the ref leter on to update the state, so we can simply connect the ref on group write there like:
 return (
    <group ref={group}>{childern}</group>
    (useRef define xina vani mathi react ma define gar import from 'react' ma )
 )



   // set the model rotation smoothly.
  easing.dampE(
    
  )
  dampE vaneko fxn, we pass couple of properties to it. properties ma variable ni pass garnu paryo.

  aba properties ma x,y,z variable pass gareko,
  [state.pointer.y / 10, -state.pointer.x/5, 0] , x= state ko pointer ko y divided by 10, z= 0,
  this is ganna break it one more time, because we are ganna provide smooth time also.


***VVI*** lekheko kura lai padhna sik, tyo info ma deko kura haru 

eg. smoothTime?: number = smoothTime hunxa tesma, number form ma. likewise, delta?.(meaning the difference diyo pani lekh)
delta = difference kasari find garni? (need to hold the useFrame hooks: allow us to execute code on everyrendered frame.)
(so we can run different effects, there controls and so on.)
(useFrame accepts the callback fxn) then we can use all the easing code inside callback fxn [("here we get state,delta")=>{
    "yo vitra vaneko kya "
    
    }] "delta meaning the difference from last frame that happened"
    now we can pass delta as last parameter to easing.(tyo mathi state sangai,  delta pass gareko vayera )


        const isBreakpoint = window.innerWidth <= 1260;
    const isMobile = window.innerWidth <= 600; //this ensure we can make shirt proper size on all different scren.


    if(snap.intro) ="on homepage "
    else ="on customizer page"


        easing.damp3(
      state.camera.position, 
      targetPosition,
      0.25,
      delta
    )      //state.camera.position = one parameter, targetPosition = another parameter, 0.25 = smoothTime, delta = difference
    (yo sabbai parameter pass ho)


    ###########################camera ko dherai jasto banayo: now jumping back to improving shirt model.
    again on shirt.jsx 

    (now we work on (if we showing logo or not or the fullTexture ))
 Todo that, we can hold the "snap (whichis state)" and then check ifFulltexture then we apply, Decal.

we ganna play this with more actual easing by applying useFrame hooks.(applying color smoothly not tramatically)



// aba yo changes automatic render huna ko lagi group ma key create garnu parxa,
 it cannot be use as state(direcly)
// recreate string of current state 
const stateString = JSON.stringify(snap);

ani balla group ma key={stateString} use grna painxa, (this way, react will render model, whenever state changes )




###############################
Backdrop.jsx (now its time for focusing on backdrop)
(index.jsx vitra ko uncomment and three js implementation to backdrop)
(shirt vanda paxadi cool lights ko lagi, shadow haru ko lagi )


index.jsx ma
    // instead of using canvas name, actual canvas model is used where inside many 
    // fxn are used, see doc.(bckdrop shadow fix grna, playing with canvas) shadows huna paryo,
    // cmra position milna pary, feel of view(fov) kasto thulo ki syano dekhni
    //gl property pani use garni: for preserver drawing buffer (backdrop kai lagi, canvas sanga play)


again in backdrop.jsx 
for focusing on removing, shadow, we need to useRef (because we need to reference to that specific shadow)
ref vanera use garyo accumulateShadow ma, 
we use 'temperal' variable(its going to smooth out the adges of the shadow over time )
we use 'frames:60' meaning frames going to render in 60 frames
we use 'alphatest (set trasperancy of shadow)'



with all this, we are done with backdrop, camera, now all the way to customizer.jsx 
(button haru ko lagi tab vanni xani ahile)

######################################
from customizer, click Tabs and all fxn perform there
Tab.jsx
// you remember, inside customizer, we have couple of props to our tab, here
we have things like tab, isFilterTab, isActivaTab and the handleClick.

so lets get those props in Tab ko callback(arrow fxn vitra)
(tab, isFilterTab, isActivaTab, handleClick)

now lets change tab ko div into actual jsx of tab,  doing that by giving each div a key.
key={tab.name}
className={"dynamic template string"}
i.e.  className={`tab-btn ${isFilterTab} 'rounded-full glassmorhism' : rounded-4 `}
if isFilterTab then rounded-full glassmorhism, else rounded-4


now we can give styles depending on it active for that we create :
const activeStyles = isFilterTab && isActivaTab ?
if ... and .... inthatcase, we can give a property

aba, tala style={activeStyles} vanera pass garera, aba div vitra image rakhni

className={`${isFilterTab ? 'w-2/3 h-2/3': 'w-11/12 h-11/12 object-contain'}`} if (isFilterTab then 
yeuta design, else arko design "look clearly writing style")



######################################
now for makng tabs clickable, goto customizer.jsx 
// tala patti tyo active click garda k hune lekheko xa, aba,,
//show tab depending on the activeTab vanni ma new clickable fxn 
  const generateTabContent = ("yo ma ahile parameter ligdain bcause ") => {
    
  }        // bcausepaxi ko ,we ganna keep track of active tag within the state.


    // write here as the local state of our app, we can create use state
  const [file, setfile] = useState('')
the first useState be our file, later on we need to upload a file, so we make it empty now.

  const [activeEditorTab, setactiveEditorTab] = useState("");
  const [activeFilterTab, setactiveFilterTab] = useState({
    logoShirt:true,
    stylishShirt:false,
  })
  //this shows are we going to show logo, full texture or which tab is active.

  //now we have everything to work with generateTabContent, how we implement it is by using switch case.
  in activeEditorTab, if case is colorpicker, we ganna return selfclosing "<colorpicker/>"
("same likethis for all ")
after that we are ganna, display additional components on top of the layout (colorpicker,aipicker, filepkr)
using AbsolutePositioning, once we click on them.
(for that happen, we have to call generateTabContent somewhere, so(below our editor tabs))

//now on the editor tab, we can call the setactiveEditorTab to tab that name,
This,,,,
 handleClick={() => setactiveEditorTab(tab.name)}
 (aba click garda nam dekhauni matrai vayo, but we have to add more fxn so,
 lets focus on colorpicker first )

 ########################################
ColorPicker.jsx

aba sketchpicker vanni react-color bata ligni ,
 ani 
 div vitra className rakhesi ani selfclosing colorpicker rakhni ani,
 tyo choose garna mildaina , disable hunca, enable garna lai 

 tei sketchpicker vitra disableAlpha, onchange garda k huna paryo tyo rakhni.

#################################################(customizer.jsx)
 ////with this, colorpicker is fully set, now we can go back to customizer.
 and focus on the FilePicker.

 whare we can upload own images to display them as logo.
 (for that to work, we can pass couple of props,(firlst of all, pass the file={file},
 setfile={setFile},"these are coming from state"))

 Now, we have to create a special fxn called, 
 const readFile =(type) => {

 }  //which is going to takein the type of the file and 
 then we have to pass it to a reader fxn, to get the file data 
 
 reader(file)
 .then((result) =>{

 }) //then we do a .then where we get the result, 


   const readFile = (type ) => {
    reader(file)
    .then((result) =>{
      handleDecals(type,result);
      setactiveEditorTab("")

    } )
  } //handleDecals on shirt, depending on the type and the result.
  //setactiveEditorTab to empty string, meaning we want to reset it.

  //handleDecals implemented vako xin aba const handleDecals garera,implement
  garnu parxa, tyo use garnu vanda mathi nai.
  type,result (based on this, we ganna update the shirt.)


    const DecalType = DacalTypes[type]; //first pass decalType by 
    decalType vanni const and DecalType[type] ("we pass in type inside it.")

    Now we ganna update the state by, state[decalType.stateProperty] =..


    state[DecalType.stateProperty] = result; //updating value of the store. 
    ////hamle useSnapshot garera store vitra ko ligeko them ni tei.

    ###mathi ko gareko sabbai are we showing logo, texture or both ko lagi####


    #########################################################
    FilePicker.jsx 

    const FilePicker = ({file, setFile, readFile}) => {}
    utapatti ko use gareko sabbai ligeko , 


    <div className="filepicker-container">
      <div className="flex-1 flex flex-col">
        <input 
          id="file-upload"
          type="file"
          accept="image/*"
          onChange={(e) => setFile(e.target.files[0])}
        /> //ganna have div and input field have id,type,accept ?? only img,

        onChange garda , change hou vanera tyo lekheko 


      <label htmlFor="file-upload" className="filepicker-label">
          Upload File
        </label> 
        //label is connected to above input by giving htmlFor, 
        and then className for design .

below that, we ganna show, which file have been uploaded, so 
we ganna say, 
<p> if file is tripple equal to empty string, 
then we can say, no file selected, else show file name 



      <div className="mt-4 flex flex-wrap gap-3">
        <CustomButton 
          type="outline"
          title="Logo"
          handleClick={() => readFile('logo')}
          customStyles="text-xs"
        />
        <CustomButton 
          type="filled"
          title="Full"
          handleClick={() => readFile('full')}
          customStyles="text-xs"
        />
      </div> //this div is wrapper for our buttons.

      //handleClick is a callback fxn passing the logo,full

  
  ##aba custombutton ma else if condition lagayera matrai tyo hunxa 

  else if(type ==="outline") {
    return {
      borderWidth: '1px',
      borderColor: snap.color,
      color: snap.color
    }
  }
////customizer ma sabai kaam gareko vayera, we can use upload fxn, 
aba logo banayera ani tya upload garera tshirt ma use garna sakkinxa

########################
Now, it time for turning on and off the full or logo, tala patti ko tshirt 
so, customizer, FilterTabs vitra, handleClick vanni ahile empty xa, 
(lets fill it with fxn)



################################## now time for adding aipicker,
Customizer.jsx
      case "aipicker":
        return <AIPicker
        prompt={prompt}
        setPrompt = {setPrompt}
        generatingImg = {generatingImg}
        handleSubmit = {handleSubmit}
         //line no 46-53

Now handleSubmit vanni navayera tyo vanda tala patti create gareko 
  const handleSubmit = async (type ){
    if else fxn, (prompt xina vani alert deu, xa vani try catch finally use gara)
  }  //async fxn thats going to take in a type , (want to create a logo or full texture) 
*********************************************************************************************************************************
 inside try block, we have to use backend fxn to call and for that, we create a folder called server and after creating folder, 
 cd server, on terminal, write , npm init -y, (now it will create all the file and folder in single file called  .json file)


